import tkinter as tk
from tkinter import ttk, messagebox
import requests
from PIL import Image, ImageTk
import pygame #use pygame for the background music

#a class made to organize all the elements for the Title Page
class TitlePage:
    def __init__(self, root, switch_to_main):
        self.root = root
        self.switch_to_main = switch_to_main

        self.frame = tk.Frame(self.root)
        self.frame.pack(fill=tk.BOTH, expand=True)
        
        #background image used
        self.bg_image = Image.open(r"C:\Users\aacun\Downloads\KHAETLIE\drink.jpg") 
        self.bg_image = self.bg_image.resize((600, 400))
        self.bg_photo = ImageTk.PhotoImage(self.bg_image)

        #make the label 
        self.bg_label = tk.Label(self.frame, image=self.bg_photo)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        self.title_label = tk.Label(
            self.frame, 
            text="The Cocktail Finder", 
            font=("Bonheur Royale", 40, "bold"), 
            pady=20,
            bg=None, 
            fg='black'
        )
        self.title_label.pack(pady=10)

        self.start_button = ttk.Button(
            self.frame, 
            text="Start", 
            command=self.switch_to_main
        )
        self.start_button.pack(pady=20)

    #make the title page disappear and show the main page
    def destroy(self):
        self.frame.destroy()

#a class made to organize the main page and its elements
class CocktailApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Cocktail Finder")
        self.root.geometry("600x400") #window size


       #background image used
        self.bg_image = Image.open(r"C:\Users\aacun\Downloads\KHAETLIE\drink.jpg")
        self.bg_image = self.bg_image.resize((600, 400))
        self.bg_photo = ImageTk.PhotoImage(self.bg_image)

        self.bg_label = tk.Label(self.root, image=self.bg_photo)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        #input label and entry
        self.label = ttk.Label(self.root, text="Enter cocktail name:")
        self.label.pack(pady=10)

        self.entry = ttk.Entry(self.root, width=30)
        self.entry.pack(pady=10)

        #add a dropdown menu for categories
        self.category_label = ttk.Label(self.root, text="Select category:")
        self.category_label.pack(pady=10)

        self.category_var = tk.StringVar()
        self.category_dropdown = ttk.Combobox(self.root, textvariable=self.category_var, state="readonly")
        self.category_dropdown.pack(pady=10)
        self.load_categories()

        #search button
        self.search_button = ttk.Button(self.root, text="Search", command=self.search_cocktail)
        self.search_button.pack(pady=10)

        #result listbox
        self.result_area = tk.Text(self.root, wrap=tk.WORD, width=70, height=15)
        self.result_area.pack(pady=10)

    #a function created for getting the categories from the API
    def load_categories(self):
        api_url = "https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list"
        try:
            response = requests.get(api_url)
            response.raise_for_status()
            data = response.json()

            categories = [item['strCategory'] for item in data.get('drinks', [])]
            self.category_dropdown['values'] = categories
            if categories:
                self.category_var.set(categories[0])
        
        #show an error if the API request fails
        except requests.RequestException as e:
            messagebox.showerror("API Error", f"An error occurred while loading categories: {e}")

    #a function which allows users to search for cocktails
    def search_cocktail(self):
        cocktail_name = self.entry.get()
        category = self.category_var.get()
        
        if not cocktail_name.strip() and not category.strip():
            messagebox.showwarning("Input Error", "Please enter a cocktail name or select a category.")
            return

        if cocktail_name.strip():
            api_url = f"https://www.thecocktaildb.com/api/json/v1/1/search.php?s={cocktail_name}"
        else:
            api_url = f"https://www.thecocktaildb.com/api/json/v1/1/filter.php?c={category}"

        try:
            response = requests.get(api_url)
            response.raise_for_status()
            data = response.json()

           #get the list of drinks from the API
            drinks = data.get("drinks")
            
            #drinks will be displayed when they are found in the API
            if drinks:
                self.display_cocktail_info(drinks)
                
            #no drinks found means an error message is shown
            else:
                self.result_area.delete("1.0", tk.END)
                messagebox.showerror(tk.END, "No results found.")
        except requests.RequestException as e:
            messagebox.showerror("API Error", f"An error occurred: {e}")

    # a function made to display all the information to the users
    def display_cocktail_info(self, drinks):
        #clear the result before displaying new information
        self.result_area.delete("1.0", tk.END)
        for drink in drinks:
            
            #show the name, cattegory, and instructions
            name = drink.get("strDrink")
            category = drink.get("strCategory")
            instructions = drink.get("strInstructions")
            
            #get all the ingerdients needed
            ingredients = [
                f"{drink.get(f'strIngredient{i}')}: {drink.get(f'strMeasure{i}', '')}".strip()
                for i in range(1, 16)
                if drink.get(f"strIngredient{i}")
            ]

            #insert the name to the result listbox
            self.result_area.insert(tk.END, f"Name: {name}\n")
            
            #display provided category
            if category:
                self.result_area.insert(tk.END, f"Category: {category}\n")
            self.result_area.insert(tk.END, "Ingredients:\n")
            self.result_area.insert(tk.END, "\n".join(ingredients) + "\n")
            
            #display any provided instructions
            if instructions:
                self.result_area.insert(tk.END, f"Instructions: {instructions}\n\n")
            self.result_area.insert(tk.END, "-" * 50 + "\n\n") #to separate each drink

def main():
    
    #background music used for the application
    pygame.mixer.init()
    pygame.mixer.music.load(r"C:\Users\aacun\Downloads\KHAETLIE\cocktaildb.mp3") #downlaoded music
    pygame.mixer.music.play(-1)
    
    root = tk.Tk()
    root.title("Cocktail Finder")
    root.geometry("600x400")

    def switch_to_main():
        title_page.destroy()
        app = CocktailApp(root)

    #run the application
    title_page = TitlePage(root, switch_to_main)
    root.mainloop()

if __name__ == "__main__":
    main()
